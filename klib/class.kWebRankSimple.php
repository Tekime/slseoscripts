<?php
/**
 * class.kWebRankSimple.php - Kytoo Simple Keyword Ranking Script
 *
 * >>> THIS IS NOT FREE SOFTWARE: DO NOT SELL, SHARE, OR DISSEMINATE ANY PART OF THIS FILE. <<<
 *
 * @copyright   Copyright (c) 2012 Scriptalicious, All Rights Reserved
 * @author      Gabriel Harper - http://www.scriptalicious.com/
 * @version     2.2
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * 2.2  Fixed: Google obfuscated URLs fix
 * 2.1  Fixed: Wordtracker results
 * 2.0  Fixed: Google results
 *
 */

class kWebRankSimple
{
    
    /**
     * @access  public
     * @var     array $errors   Error messages generated by the class
    */
    var $errors = array();
    
    /**
     * @access  public
     * @var     int $count  Number of results per page for URLs
    */
    var $count = 100;
    
    /**
     * @access  public
     * @var     int $limit  Max search results to return in any case
    */
    var $limit = 100;
    
    /**
     * @access  public
     * @var     int $referer  HTTP_REFERER to set in CURL transfer
    */
    var $referer = '';
    
    var $suggest = array(
        'wordtracker' => array(
            'name' => 'Wordtracker',
            'title' => 'Wordtracker Keyword Suggestion',
            'url' => 'http://freekeywords.wordtracker.com/',
            'furl' => 'http://freekeywords.wordtracker.com/?seed=%s',
            'regex' => '/<td class=\'k\'>[\r\n].*?<a href=\'(.*?)?\'>([A-Za-z0-9 ].*?)<\/a>[\r\n].*?<\/td>/'
        ),
        'googlerelated' => array(
            'name' => 'Google',
            'title' => 'Google Related Searches',
            'url' => 'http://www.google.com/',
            'furl' => 'http://www.google.com/search?q=%s',
            'regex' => '/<a href="(.*?)?">(.*?)<\/a>/'
        ),
        'yahoorelated' => array(
            'name' => 'Yahoo',
            'title' => 'Yahoo Related Searches',
            'url' => 'http://search.yahoo.com/',
            'furl' => 'http://search.yahoo.com/search?ei=UTF-8&y=Search&rs=more&rs=all&p=%s',
            'regex' => '/<a(.*?)?">(.*?)<\/a>/'
        )
    );
    
    /**
     * @access  private
     * @var     array $engines  Search engines supported
    */
    var $engines = array(
    
        'google' => array(
            
            'title' => 'Google',
            'url' => 'http://www.google.com/',
            'query_url' => 'search?q=%s&num=%s&start=%s',
            'link_start' => '<h3 class="r">',
            'link_end' => '</h3>',
            'title_start' => '<h3 class="r">',
            'title_end' => '</h3>',
            'link_next' => 'Next</a>',
            'offset' => 0
        ),
        
        'yahoo' => array(
            
            'title' => 'Yahoo',
            'url' => 'http://search.yahoo.com/',
            'query_url' => 'search?p=%s&n=%s&b=%s',
            'link_start' => '<div class="res"><div><h3>',
            'link_end' => '</a>',
            'title_start' => '<em class=yschurl>',
            'title_end' => '</em>',
            'link_next' => '<span>Next</span>',
            'offset' => 1
        ),
        'bing' => array(
            
            'title' => 'Bing',
            'url' => 'http://www.bing.com/',
            'query_url' => 'search?q=%s&count=50&xzx=%s&first=%s&FORM=RCRE',
            'link_start' => '<div class="sb_tlst"><h3>',
            'link_end' => '</h3>',
            'title_start' => '<div class="sb_tlst"><h3>',
            'title_end' => '</h3>',
            'link_next' => '<span>Next</span>',
            'offset' => 1
        )
    );

    var $proxy_table = false;
    var $proxy_urlformat = 'index.php?hl=40&q=%s';
        
    function kWebRankSimple()
    {
    
        return true;
    }
    
    function extract_keywords($string, $ds = 'wordtracker')
    {
        if($ds == 'wordtracker')
        {
            if(strpos($string, 'Apologies for the inconvenience') === false)
            {
                preg_match_all($this->suggest[$ds]['regex'], $string, $matches);

                foreach($matches[0] as $key => $match)
                {
                    $words[] = array(
                        'word' => $matches[2][$key],
                        'count' => $matches[3][$key],
                        'href' => $this->suggest[$ds]['url'] . substr($matches[1][$key], 1)
                    );
                }
                return $words;
            }
            else
            {
                $this->error = 'Temporarily blocked to prevent SPAM. Try again later.';
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    
    function keyword_suggest($term, $ds = 'wordtracker')
    {
        if($ds == 'wordtracker')
        {
            $furl = sprintf($this->suggest[$ds]['furl'], $term);

            $contents = k_http_get($furl);

            if($words = $this->extract_keywords($contents, $ds))
            {
                return $words;                
            }
            else
            {
                return false;
            }

        }
        elseif($ds == 'googlerelated')
        {
            $furl = sprintf($this->suggest[$ds]['furl'], $term);
            $contents = k_http_get($furl);

            $start = strpos($contents, 'Searches related to');
            if($start !== false)
            {
                $contents = substr($contents, $start);
                $start = strpos($contents, '</table>');
                if($start !== false) $contents = substr($contents, 0, $start);

                preg_match_all($this->suggest[$ds]['regex'], $contents, $matches);
                foreach($matches[0] as $key => $match)
                {
                    $cleanword = k_text_striphtml($matches[2][$key]);
                    $words[] = array(
                        'word' => $cleanword,
                        'count' => 1,
                        'href' => sprintf($this->suggest[$ds]['furl'], urlencode($cleanword))
                    );
                }
                return $words;
            }
            else
            {
                $this->error = 'Temporarily blocked to prevent SPAM. Try again later.';
                return false;
            }
        }
        elseif($ds == 'yahoorelated')
        {
            $furl = sprintf($this->suggest[$ds]['furl'], $term);
            $contents = k_http_get($furl);

            $start = strpos($contents, 'Also try');
            if($start !== false)
            {
                $contents = substr($contents, $start);
                $start = strpos($contents, 'SPONSOR');
                if($start !== false) $contents = substr($contents, 0, $start);

                preg_match_all($this->suggest[$ds]['regex'], $contents, $matches);
                foreach($matches[0] as $key => $match)
                {
                    $cleanword = k_text_striphtml($matches[2][$key]);
                    if((!empty($cleanword)) && ($cleanword !== 'more'))
                    {
                        $words[] = array(
                            'word' => $cleanword,
                            'count' => 1,
                            'href' => sprintf($this->suggest[$ds]['furl'], urlencode($cleanword))
                        );
                    }
                }
                return $words;
            }
            else
            {
                $this->error = 'Temporarily blocked to prevent SPAM. Try again later.';
                return false;
            }
        }
        else
        {
            $this->error = 'Temporarily unavailable. Try again later.';
            return false;
        }
    }
        
    /**
     * Accepts a $matches set and returns result for a domain name
     *
     * @param string $url       Full URL, including http:// and trailing slash `http://www.example.org/`
     * @param string $matches
     */
    function getRank($url, $matches)
    {
        foreach($matches as $rank=>$result)
        {
            if(strpos($result['url'], $url) === 0) return $rank;
        }
        return 0;
    }
    
    /**
     * Get search results and details 
     *
     * @param string $search
     * @param string $engine
     */
    function getResults($query, $engine = 'google', $limit = 0)
    {
    
        if(is_array($this->results_cache))
        {
            foreach($this->results_cache[$engine] as $key => $value)
            {
                if($value['query'] == $query)
                {
                    return $value['matches'];
                }
            }
        }
 
        if(!$limit) $limit = $this->limit;
        $search_end = false;
        $start = 0;
        $matches = array();
        $matches[0] = array();
             
        while($search_end === false)
        {
            $cached = false;
            $update = false;
            $q_matches = array();
            
            // Set query URL
            $query_url = $this->engines[$engine]['url'] . sprintf($this->engines[$engine]['query_url'], urlencode($query), $this->count, ($start+$this->engines[$engine]['offset']));
            $this->query_url = $query_url;

            // Get URL contents
            $q_response = $this->getUrl($query_url);

            // Check for links
            $d_matches = get_middle_all($this->engines[$engine]['link_start'], $this->engines[$engine]['link_end'], $q_response);

            $index = count($matches);

            foreach($d_matches as $pos=>$link)
            {
                if($engine == 'google')
                {
                    // Check for and rewrite URL redirect
                    if(strpos($link, '/url?q=') !== false)
                    {
                        preg_match('/\/url\?q=(.*?)&amp;/', $link, $rmatches);
                        if(!empty($rmatches[1]))
                        {
                            $url = urldecode($rmatches[1]);
                        }
                    }
                    else
                    {
                        $urlpattern = "/\"http([^\"]+)/i";

                        if(preg_match($urlpattern, $link, $urlmatch))
                        {
                            $url = urldecode($urlmatch[0]);
                        }
                        else 
                        {
                            $url = 'URL missing';
                        }
                    }
                }
                elseif($engine == 'yahoo')
                {
                    $urlpattern = "/http([^\"]+)/i";
                    if(preg_match($urlpattern, $link, $urlmatch))
                    {
                        $url = urldecode($urlmatch[0]);
                    }
                    else 
                    {
                        $url = 'URL missing';
                    }
                }
                elseif($engine == 'bing')
                {
                    $urlpattern = "/http([^\"]+)/i";
                    if(preg_match($urlpattern, $link, $urlmatch))
                    {
                        $url = urldecode($urlmatch[0]);
                    }
                    else 
                    {
                        $url = 'URL missing';
                    }
                }

                $titlepattern = "/\">(.*)<\/a/i";
                if(preg_match($titlepattern, $link, $titlematch))
                {
                    $title = strip_tags(substr($titlematch[0], 2));
                }
                else 
                {
                    $title = 'Title missing';
                }
                $q_matches[$index] = array('pos' => $index, 'url' => $url, 'title' => $title);   
                $index++;
            }
            
            $matches = array_merge($matches, $q_matches);

            if(((strpos($q_response, $this->engines[$engine]['link_next'])) === false)) {
                $search_end = true;
            }

            // Page forward and check limits
            $start = $start + $this->count;
            if($start >= $limit) $search_end = true;
        }
        
        // Check for additional pages
        unset($matches[0]);
        $this->results_cache[$engine][] = array('query' => $query, 'matches' => $matches);
        return $matches;
    }

    
    /**
     * Use CURL to fetch URL contents and return them as a string
     *
     * @param string $url
     * @param string $referer
     * @return string
     */
    function getUrl($url, $referer = 'als')
    {
        if((!empty($this->proxy_table)) && (!empty($this->proxy_urlformat)))
        {
            global $db;

            $sql = 'SELECT proxy_id, prx_url, prx_queries FROM ' . $this->proxy_table . ' WHERE prx_status = 1 ORDER BY prx_queries ASC LIMIT 1';
            if(($rs = $db->execute($sql)) && (!$rs->EOF))
            {
                $this->proxy = array('url' => $rs->fields['prx_url'], 'queries' => $rs->fields['prx_queries'], 'status' => $rs->fields['prx_status']);
                $sql = 'UPDATE ' . $this->proxy_table . ' SET prx_queries = ' . intval($rs->fields['prx_queries'] + 1) . ', dateupdated = "' . unix_to_dbtime(time()) . '" WHERE proxy_id = ' . $rs->fields['proxy_id'];
                $db->execute($sql);
                $alt_curl = $rs->fields['prx_url'];
            }
        }
        if(!empty($alt_curl))
        {
            $referer = $alt_curl;
            $url = sprintf($alt_curl . $this->proxy_urlformat, urlencode($url));
        }

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_REFERER, $referer);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        $contents = curl_exec($ch);
        curl_close($ch);

        $crawl_errors = array('google' => '<title>403 Forbidden</title>', 'yahoo' => 'error 999');
        
        foreach($crawl_errors as $key => $value)
        {
            if(strpos($contents, $value) !== false)
            {
                $this->error = 'Temporarily banned from ' . $key . ' for automated requests from your IP address.<br /><br />' . $url;
                return false;
            }
        }        
        return $contents;
    }
}